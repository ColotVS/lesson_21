public class lesson_01 {
    //ООП — основные принципы

    //Начнем с четырех принципов ООП.
    //Это: абстракция, инкапсуляция, наследование и полиморфизм.
    //(Раньше их было три, но потом решили добавить абстракцию)


    //1) Абстракция.
    //С точки зрения программирования, абстракция — это, скажем так, правильное разделение программы на объекты.

    //Обычно любую большую программу можно десятками способов представить в виде взаимодействующих объектов.
    //Абстракция позволяет отобрать главные характеристики и опустить второстепенные.


    //2) Инкапсуляция.
    //Цель инкапсуляции – улучшить качество взаимодействия вещей за счет упрощения их.

    //С точки зрения программирования, инкапсуляция – это «сокрытие реализации».
    //Наш класс может содержать сотни методов и реализовывать очень сложное поведение в различных ситуациях.
    //Но мы можем скрыть от посторонних глаз все его методы (пометить модификатором private),
    //а для взаимодействия с другими классами оставить всего пару-тройку методов (пометить их модификатором public).
    //Тогда все остальные классы нашей программы будут видеть в этом классе всего три метода, и будут вызывать именно их.


    //3) Наследование.
    //С точки зрения программирования, наследование – это специальное отношение между двумя классами.

    //В программировании есть возможность создавать один класс на основе другого.
    //Новый класс становится потомком (наследником) уже существующего.
    //Это очень выгодно, когда есть класс, который содержит 80%-90% нужных нам данных и методов.
    //Мы просто объявляем подходящий класс родителем нашего нового класса,
    //тогда в новом классе автоматически появляются все данные и методы класса-родителя.


    //4) Полиморфизм.
    //Полиморфизм – это понятие из области программирования.
    //Оно описывает ситуацию, когда за одним интерфейсом скрываются разные реализации.

    //Полиморфизм позволяет единообразно обращаться к объектам различных классов (обычно имеющих общего предка) –
    //вещь, которую трудно переоценить. Ценность его тем выше, чем больше программа.
}
