public class lesson_02 {
    //Наследование. Преимущество наследования

    // Предположим тебе нужно написать очень сложный класс.
    //Писать с нуля долго, потом еще долго все тестировать и искать ошибки.
    //Зачем идти самым сложным путем? Лучше поискать – а нет ли уже такого класса?

    //Предположим, ты нашел класс, который своими методами реализует 80% нужной тебе функциональности.

    //Ты можешь просто скопировать его код в свой класс. Но у такого решения есть несколько минусов:

    //1) Найденный класс уже может быть скомпилирован в байт-код, а доступа к его исходному коду у тебя нет.

    //2) Исходный код класса есть, но ты работаешь в компании, которую могут засудить на пару миллиардов
    //за использование даже 6 строчек чужого кода. А потом она засудит тебя.

    //3) Ненужное дублирование большого объема кода.
    //Кроме того, если автор чужого класса найдет в нем ошибку и исправит ее, у тебя эта ошибка останется.

    //Есть решение потоньше, и без необходимости получать легальный доступ к коду оригинального класса.
    //В Java ты можешь просто объявить тот класс родителем твоего класса.
    //Это будет эквивалентно тому, что ты добавил код того класса в код своего.
    //В твоем классе появятся все данные и все методы класса-родителя.

    //Наследование можно использовать и для других целей.
    //Допустим, у тебя есть десять классов, которые очень похожи, имеют совпадающие данные и методы.
    //Ты можешь создать специальный базовый класс, вынести эти данные (и работающие с ними методы)
    //в этот базовый класс и объявить те десять классов его наследниками.
    //Т.е. указать в каждом классе, что у него есть класс-родитель – данный базовый класс.

    //Также как преимущества абстракции раскрываются только рядом с инкапсуляцией,
    //так и преимущества наследования гораздо сильнее при использовании полиморфизма.

    //Для этого после объявления нашего класса нужно указать ключевое слово extends
    //и написать имя родительского класса. Унаследоваться можно только от одного класса.


}
