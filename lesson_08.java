public class lesson_08 {
    //Инкапсуляция

    //1) Валидное внутреннее состояние.
    //В программах часто возникают ситуации, когда несколько классов, взаимодействуют с одним и тем же объектом.
    //В результате их совместной работы нарушается целостность данных внутри объекта — объект уже не может продолжить нормально работать.

    //Поэтому объект должен следить за изменениями своих внутренних данных, а еще лучше – проводить их сам.

    //Если мы не хотим, чтобы какая-то переменная класса менялась другими классами,
    //мы объявляем ее private, и тогда только методы её же класса смогут получить к ней доступ.
    //Если мы хотим, чтобы значения переменных можно было только читать, но не изменять,
    //тогда нужно добавить public getter для нужных переменных.

    //Например, мы хотим, чтобы все могли узнать количество элементов в нашей коллекции,
    //но никто не мог его поменять без нашего разрешения.
    //Тогда мы объявляем переменную private int count и метод public getCount().

    //Правильное использование инкапсуляции гарантирует, что ни один класс не может получить
    //прямой доступ к внутренним данным нашего класса и, следовательно, изменить их без контроля с нашей стороны.
    //Только через вызов методов того же класса, что и изменяемые переменные.

    //Лучше исходить из того, что другие программисты всегда будут использовать твои классы самым удобным для них образом,
    //а не самым безопасным для тебя (для твоего класса). Отсюда и ошибки, и попытки заранее избавиться от них.


    //2) Контроль передаваемых аргументов.
    //Иногда нужно контролировать аргументы, передаваемые в методы нашего класса.
    //Например, наш класс описывает объект «человек» и позволяет задать дату его рождения.
    //Мы должны проверять все передаваемые данные на их соответствие логике программы и логике нашего класса.
    //Например, не допускать 13-й месяц, дату рождения 30 февраля и так далее.

    //— А зачем кому-то указывать в дате рождения 30 февраля?
    //— Во-первых – это может быть ошибка ввода данных от пользователя.
    //Во-вторых, прежде чем программа будет работать как часы, в ней будет много ошибок.


}
